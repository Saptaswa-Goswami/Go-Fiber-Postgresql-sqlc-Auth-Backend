// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (user_id, access_token, refresh_token) VALUES ($1, $2, $3) RETURNING id, user_id, access_token, refresh_token, created_at, updated_at
`

type CreateTokenParams struct {
	UserID       pgtype.UUID `json:"user_id"`
	AccessToken  string      `json:"access_token"`
	RefreshToken string      `json:"refresh_token"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken, arg.UserID, arg.AccessToken, arg.RefreshToken)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens WHERE user_id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteToken, userID)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, user_id, access_token, refresh_token, created_at, updated_at FROM tokens WHERE user_id = $1
`

func (q *Queries) GetToken(ctx context.Context, userID pgtype.UUID) (Token, error) {
	row := q.db.QueryRow(ctx, getToken, userID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIDByAcsessToken = `-- name: GetUserIDByAcsessToken :one
SELECT user_id FROM tokens WHERE access_token = $1
`

func (q *Queries) GetUserIDByAcsessToken(ctx context.Context, accessToken string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getUserIDByAcsessToken, accessToken)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const updateToken = `-- name: UpdateToken :exec
UPDATE tokens 
SET access_token = $2, refresh_token = $3 
WHERE user_id = $1
`

type UpdateTokenParams struct {
	UserID       pgtype.UUID `json:"user_id"`
	AccessToken  string      `json:"access_token"`
	RefreshToken string      `json:"refresh_token"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.Exec(ctx, updateToken, arg.UserID, arg.AccessToken, arg.RefreshToken)
	return err
}
